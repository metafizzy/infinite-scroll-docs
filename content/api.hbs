---
title: API
layout: doc
description: Build upon Infinite Scroll's JavaScript API with its methods and properties
---

{{! ----------------------------------------------------------------- }}

<h2>Methods</h2>

<p>Methods are actions done by Infinite Scroll instances.</p>

<p>With jQuery, methods follow the jQuery UI pattern.</p>

``` js
$container.infiniteScroll( 'methodName' /*, arguments */ )
```

``` js
let $container = $('.container').infiniteScroll({ /* options... */ })
  .infiniteScroll('loadNextPage');
```

<div class="call-out">
  <p>jQuery chaining is broken by methods that return values like <a href="#getpath"><code>getPath</code></a>.</p>
</div>

<p>Vanilla JavaScript methods look like:</p>

``` js
infScroll.methodName( /* arguments */ )
```

<p>Unlike jQuery methods, vanilla JS methods cannot be chained together.</p>

``` js
// vanilla JS
let infScroll = new InfiniteScroll('.container', {
  // options...
});
infScroll.loadNextPage();
```

{{! ----------------------------------------------------------------- }}

<h3>loadNextPage</h3>

<p>Load the next page.</p>

``` js
// jQuery
let promise = $container.infiniteScroll('loadNextPage')
// vanilla JS
let promise = infScroll.loadNextPage()
```

<p class="argument">
  <code class="argument__code">promise</code>
  <span class="argument__type"><i>Promise</i></span>
</p>

<p><code>loadNextPage</code> returns a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises"><code>Promise</code></a>, allowing you to chain with <code>.then()</code>. The following <code>.then()</code> function is triggered after the page has loaded and after items have been appended.</p>

``` js
// vanilla JS
infScroll.loadNextPage().then( function( loaded ) {
  // next page has been loaded
  let { response, body, items } = loaded;
  console.log( response.path );
  console.log( body );
  console.log( items );
} );
```

<p class="argument">
  <code class="argument__code">response</code>
  <span class="argument__type"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Response"><i>Response</i></a></span>
  <span class="argument__description">response returned from fetch request</span>
</p>
<p class="argument">
  <code class="argument__code">body</code>
  <span class="argument__type"><i>Document</i>, <i>JSON</i>, or <i>String</i></span>
  <span class="argument__description">the operative content loaded from the fetch request. </span>
</p>
<p class="argument">
  <code class="argument__code">items</code>
  <span class="argument__type"><i>NodeList</i></span>
  <span class="argument__description">appended elements. Requires <a href="http://local/infinite-scroll-docs/build/options.html#append"><code>append</code></a></span>
</p>

{{! ----------------------------------------------------------------- }}

<h3>appendItems</h3>

<p>Append items to the container.</p>

<p><code>appendItems</code> will load <code>&lt;script/&gt;</code> within item elements. This is useful for loading embed scripts.</p>

``` js
// jQuery
$container.infiniteScroll( 'appendItems', items )
// vanilla JS
infScroll.appendItems( items )
```

<p class="argument">
  <code class="argument__code">items</code>
  <span class="argument__type"><i>jQuery</i> object, <i>NodeList</i>, or <i>Array</i> of <i>Element</i>s</span>
</p>

<p>Use <code>appendItems</code> to manually append items on <a href="events.html#load"><code>load</code></a>.</p>

``` js
let $container = $('.container').infiniteScroll({
  append: false, // disable automatic appending
});

$container.on( 'load.infiniteScroll', function( event, response ) {
  // get posts from response
  let $posts = $( response ).find('.post');
  // append posts after images loaded
  $posts.imagesLoaded( function() {
    $container.infiniteScroll( 'appendItems', $posts );
  });
});
```

{{! ----------------------------------------------------------------- }}

<h3>getPath</h3>

<p>Get relative URL path for the next page.</p>

``` js
// jQuery
let path = $container.infiniteScroll('getPath')
// vanilla JS
let path = infScroll.getPath()
```

<p class="argument">
  <code class="argument__code">path</code>
  <span class="argument__type"><i>String</i></span>
</p>

``` js
let $container = $('.container').infiniteScroll({
  path: 'page/\{{#}}',
  // options...
});

$container.infiniteScroll('getPath');
// => 'page/2'
```

{{! ----------------------------------------------------------------- }}

<h3>getAbsolutePath</h3>

<p>Get the absolute URL path for the next page.</p>

``` js
// jQuery
let path = $container.infiniteScroll('getAbsolutePath')
// vanilla JS
let path = infScroll.getAbsolutePath()
```

<p class="argument">
  <code class="argument__code">path</code>
  <span class="argument__type"><i>String</i></span>
</p>

``` js
let $container = $('.container').infiniteScroll({
  path: 'page/\{{#}}',
  // options...
});

// for example URL: https://example.com/section/news/
$container.infiniteScroll('getAbsolutePath');
// => '/section/news/page/2'
```

{{! ----------------------------------------------------------------- }}

<h3>option</h3>

<p>Set options after initialization.</p>

``` js
// jQuery
$container.infiniteScroll( 'option', options )
// vanilla JS
infScroll.option( options )
```

<p class="argument">
  <code class="argument__code">options</code>
  <span class="argument__type"><i>Object</i></span>
</p>

``` js
let $container = $('.container').infiniteScroll({
  // initial options...
  // disable loading on scroll
  loadOnScroll: false,
});

// enable loadOnScroll on button click
$('.view-more-button').on( 'click', function() {
  $container.infiniteScroll( 'option', {
    loadOnScroll: true,
  });
});
```

{{! ----------------------------------------------------------------- }}

<h3>destroy</h3>

<p>Remove Infinite Scroll functionality completely.</p>

``` js
// jQuery
$container.infiniteScroll('destroy')
// vanilla JS
infScroll.destroy()
```

{{! ----------------------------------------------------------------- }}

<h2>Utilities</h2>

{{! ----------------------------------------------------------------- }}

<h3>jQuery.fn.data('infiniteScroll')</h3>

<p>Get the Infinite Scroll instance from a jQuery object. Infinite Scroll instances are useful to access Infinite Scroll properties.</p>

``` js
let infScroll = $('.container').data('infiniteScroll');
// access Infinite Scroll properties
console.log(`Infinite scroll at page ${infScroll.pageIndex}`);
```


{{! ----------------------------------------------------------------- }}

<h3>InfiniteScroll.data()</h3>

<p>Get the Infinite Scroll instance via its element. <code>InfiniteScroll.data()</code> is useful for getting the Infinite Scroll instance in JavaScript, after it has been initalized in HTML.</p>

``` js
let infScroll = InfiniteScroll.data( element )
```

<p class="argument">
  <code class="argument__code">element</code>
  <span class="argument__type"><i>Element</i> or Selector <i>String</i></span>
</p>
<p class="argument">
  <code class="argument__code">infScroll</code>
  <span class="argument__type"><i>InfiniteScroll</i></span>
  <span class="argument__description">Infinite Scroll instance</span>
</p>

<div class="example">
  <div class="example__code">
    ``` html
    <!-- init Infinite Scroll in HTML -->
    <div class="container" data-infinite-scroll='{...}'>...</div>
    ```

    ``` js
    // using a selector string
    let infScroll = InfiniteScroll.data('.container')

    // jQuery with element
    // pass in the element, $element[0], not the jQuery object
    let infScroll = InfiniteScroll.data( $('.container')[0] )

    // vanilla JS with element
    let container = document.querySelector('.container')
    let infScroll = InfiniteScroll.data( container )
    ```
  </div>
</div>

{{! ----------------------------------------------------------------- }}

<h2>Properties</h2>

<div class="call-out">
  <p>Properties are accessed only on Infinite Scroll instances. If you initialized Infinite Scroll with jQuery, use <code>.data(<span class="string">'infiniteScroll'</span>)</code> to get the instance.</p>

  ``` js
  // init Infinite Scroll with jQuery
  let $container = $('.container').infiniteScroll({...});
  // get instance
  let infScroll = $container.data('infiniteScroll');
  // access properties
  console.log( infScroll.pageIndex );
  ```
</div>

{{! ----------------------------------------------------------------- }}

<h3>pageIndex</h3>

<p>The number of the current loaded page. <code>pageIndex</code> increments by 1 on each <a href="events.html#load"><code>load</code></a>.</p>

``` js
infScroll.pageIndex
// => 1
```

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    let infScroll = $container.data('infiniteScroll');

    $container.on( 'load.infiniteScroll', function() {
      $demoStatus.text(`Loaded page: `${infScroll.pageIndex}`);
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> page-index}}
  </div>
</div>

<p>Infinite Scroll will determine the initial <code>pageIndex</code> on initialization. If <a href="options.html#path"><code>path</code></a> is set to a next link element, Infinite Scroll will determine <code>pageIndex</code> from the link's <code>href</code> value.</p>

``` html
<a class="pagination__next" href="/page/4">Next</a>
```

``` js
path: '.pagination__next',
// next page is 4, pageIndex = 3
```

<p>If <code>path</code> is set to a string with <code>\{{#}}</code>, Infinite Scroll will determine <code>pageIndex</code> from the window URL.</p>

``` js
// URL: https://example.com/blog/9.html
path: '/blog/\{{#}}.html',
// pageIndex = 9
```

<p>Otherwise, initial <code>pageIndex</code> defaults to <code>1</code>.</p>

{{! ----------------------------------------------------------------- }}

<h3>loadCount</h3>

<p>The number of pages loaded. <code>loadCount</code> increments by 1 on each <a href="events.html#load"><code>load</code></a>.</p>

``` js
infScroll.loadCount
// => 0
```

<div class="duo example">
  <div class="duo__cell example__code">
    ``` js
    let infScroll = $container.data('infiniteScroll');

    $container.on( 'load.infiniteScroll', function() {
      $demoStatus.text( infScroll.loadCount +
        'pages loaded' );
    });
    ```
  </div>
  <div class="duo__cell example__demo">
    {{> load-count}}
  </div>
</div>
